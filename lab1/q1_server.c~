#include<stdio.h>
#include<string.h>
#include<netinet/in.h>
#include<sys/types.h>
#include<sys/socket.h>
#define myport 3345
int main()
{
	int sockfd;
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	struct sockaddr_in server, client;
	server.sin_port = htons(myport);
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = inet_addr("127.0.0.1");
	memset(server.sin_zero, '\0', sizeof(server.sin_zero));
	
	int b =	bind(sockfd, (struct sockaddr *)&server, sizeof(struct sockaddr));
	

	b = listen(sockfd, 1);
	printf("\n\nListening...");
	int size = sizeof(client);
	int afd = accept(sockfd, (struct sockaddr *)&client, &size);
	int buff[20], ch, sch, n,i;
	while(1)
	{
		recv(afd, &ch, sizeof(ch), 0);
		switch(ch)
		{
			case 1:printf("Option 1. Search for an element\n");
				recv(afd, buff, sizeof(buff), 0);
				recv(afd, &n, sizeof(n), 0);
				recv(afd, &sch, sizeof(sch), 0);
				int index=-1;
				for( i=0 ; i<n ; i++)
				{	
					if (buff[i] == sch)
					{	index = i;
						break;
					}
					if(index != -1)
						break;
				}
				send(afd, &index, sizeof(index), 0);				
				break;
			case 2:printf("Option 2. Split array into odd and even\n");
				recv(afd, buff, sizeof(buff), 0);
					recv(afd, &n, sizeof(n), 0);
					int odd[10], even[10], x=0,y=0;
					for (i=0 ; i<n ; i++)
					{
						if(buff[i]%2==0)
							even[x++]=buff[i];
						else
							odd[y++] = buff[i];
					}
					send(afd, even, sizeof(even), 0);
					send(afd, odd, sizeof(odd), 0);
					send(afd, &x, sizeof(x), 0);
					send(afd, &y, sizeof(y), 0);
					break;
			case 3:i=999;
					break; 		// supposed to exit
		}
		if (i==999)
			break;
	}
	close(sockfd);
}
